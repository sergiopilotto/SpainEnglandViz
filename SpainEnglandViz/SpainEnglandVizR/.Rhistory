df_spainReduced <- rbind(df_spainReduced, df_spain[(r-2):(r-1),])
}
}
for (r in 1:nrow(df_spainReduced)){
if (df_spainReduced[r, 'isShot']=='True'){
df_spainReduced[r, 'type'] = 'Shot'
}
}
unused_actions = list("Aerial", "OffsideGiven",
"OffsidePass", 'Challenge',
"CornerAwarded", "BallTouch")
for (r in 1:nrow(df_spain)){
df_spain[r, 'seqId'] <- seq
if (df_spain[r, 'isShot']=='True'){
seq <- seq + 1
}
}
df_spainReduced <- data.frame()
for (r in 2:nrow(df_spain)) {
if (df_spain[r-1, 'seqId'] < df_spain[r, 'seqId']){
df_spainReduced <- rbind(df_spainReduced, df_spain[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_spainReduced)){
if (df_spainReduced[r, 'isShot']=='True'){
df_spainReduced[r, 'type'] = 'Shot'
}
}
unused_actions = list("Aerial", "OffsideGiven",
"OffsidePass", 'Challenge',
"CornerAwarded", "BallTouch")
df_spainReduced <- distinct(subset(df_spainReduced,
subset = !(type %in% unused_actions)))
casted_data_spain <- df_spainReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_spain %>%
process_map(frequency("relative-antecedent"))
for (r in 1:nrow(df_spain)){
df_spain[r, 'seqId'] <- seq
if (df_spain[r, 'isShot']=='True'){
seq <- seq + 1
}
}
df_spainReduced <- data.frame()
for (r in 2:nrow(df_spain)) {
if (df_spain[r-1, 'seqId'] < df_spain[r, 'seqId']){
df_spainReduced <- rbind(df_spainReduced, df_spain[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_spainReduced)){
if (df_spainReduced[r, 'isShot']=='True'){
df_spainReduced[r, 'type'] = 'Shot'
}
}
df_spainReduced <- distinct(subset(df_spainReduced,
subset = !(type %in% unused_actions)))
casted_data_spain <- df_spainReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
df_spainReduced <- data.frame()
for (r in 2:nrow(df_spain)) {
if (df_spain[r-1, 'seqId'] < df_spain[r, 'seqId']){
df_spainReduced <- rbind(df_spainReduced, df_spain[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_spainReduced)){
if (df_spainReduced[r, 'isShot']=='True'){
df_spainReduced[r, 'type'] = 'Shot'
}
}
#df_spainReduced <- distinct(subset(df_spainReduced,
subset = !(type %in% unused_actions)))
casted_data_spain <- df_spainReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_spain %>%
process_map(frequency("relative-antecedent"))
unused_actions = list("Aerial", "OffsideGiven",
"OffsidePass", 'Challenge',
"CornerAwarded", "BallTouch")
df_spainReduced <- distinct(subset(df_spainReduced,
subset = !(type %in% unused_actions)))
casted_data_spain <- df_spainReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_spain %>%
process_map(frequency("relative-antecedent"))
seq <- 0
for (r in 1:nrow(df_england)){
df_england[r, 'seqId'] <- seq
if (df_england[r, 'isShot']=='True'){
seq <- seq + 1
}
}
df_englandReduced <- data.frame()
for (r in 2:nrow(df_england)) {
if (df_england[r-1, 'seqId'] < df_england[r, 'seqId']){
df_englandReduced <- rbind(df_englandReduced, df_england[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_englandReduced)){
if (df_englandReduced[r, 'isShot']=='True'){
df_englandReduced[r, 'type'] = 'Shot'
}
}
df_englandReduced <- distinct(subset(df_englandReduced,
subset = !(type %in% unused_actions)))
casted_data_england <- df_englandReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_england %>%
process_map(frequency("relative-antecedent"))
unused_actions = list("Aerial", "OffsideGiven",
"OffsidePass", 'Challenge',
"CornerAwarded", "BallTouch",
"FormationChange", "SubstitionOn")
df_spainReduced <- distinct(subset(df_spainReduced,
subset = !(type %in% unused_actions)))
casted_data_spain <- df_spainReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_spain %>%
process_map(frequency("relative-antecedent"))
plot()
seq <- 0
for (r in 1:nrow(df_england)){
df_england[r, 'seqId'] <- seq
if (df_england[r, 'isShot']=='True'){
seq <- seq + 1
}
}
df_englandReduced <- data.frame()
for (r in 2:nrow(df_england)) {
if (df_england[r-1, 'seqId'] < df_england[r, 'seqId']){
df_englandReduced <- rbind(df_englandReduced, df_england[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_englandReduced)){
if (df_englandReduced[r, 'isShot']=='True'){
df_englandReduced[r, 'type'] = 'Shot'
}
}
df_englandReduced <- distinct(subset(df_englandReduced,
subset = !(type %in% unused_actions)))
casted_data_england <- df_englandReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_england %>%
process_map(frequency("relative-antecedent"))
View(df_englandReduced)
df_englandReduced <- distinct(subset(df_englandReduced,
subset = !(type %in% unused_actions)))
casted_data_england <- df_englandReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_england %>%
process_map(frequency("relative-antecedent"))
unused_actions = list("Aerial", "OffsideGiven",
"OffsidePass", 'Challenge',
"CornerAwarded", "BallTouch",
"FormationChange", "SubstitutionOn")
df_spainReduced <- distinct(subset(df_spainReduced,
subset = !(type %in% unused_actions)))
casted_data_spain <- df_spainReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_spain %>%
process_map(frequency("relative-antecedent"))
plot()
seq <- 0
for (r in 1:nrow(df_england)){
df_england[r, 'seqId'] <- seq
if (df_england[r, 'isShot']=='True'){
seq <- seq + 1
}
}
df_englandReduced <- data.frame()
for (r in 2:nrow(df_england)) {
if (df_england[r-1, 'seqId'] < df_england[r, 'seqId']){
df_englandReduced <- rbind(df_englandReduced, df_england[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_englandReduced)){
if (df_englandReduced[r, 'isShot']=='True'){
df_englandReduced[r, 'type'] = 'Shot'
}
}
df_englandReduced <- distinct(subset(df_englandReduced,
subset = !(type %in% unused_actions)))
casted_data_england <- df_englandReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_england %>%
process_map(frequency("relative-antecedent"))
df_englandReduced <- data.frame()
for (r in 2:nrow(df_england)) {
if (df_england[r-1, 'seqId'] < df_england[r, 'seqId']){
df_englandReduced <- rbind(df_englandReduced, df_england[(r-4):(r-1),])
}
}
for (r in 1:nrow(df_englandReduced)){
if (df_englandReduced[r, 'isShot']=='True'){
df_englandReduced[r, 'type'] = 'Shot'
}
}
df_englandReduced <- distinct(subset(df_englandReduced,
subset = !(type %in% unused_actions)))
casted_data_england <- df_englandReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_england %>%
process_map(frequency("relative-antecedent"))
unused_actions = list("Aerial", "OffsideGiven",
"OffsidePass", 'Challenge',
"CornerAwarded", "BallTouch",
"FormationChange", "SubstitutionOn",
"SubstitutionOff")
df_englandReduced <- data.frame()
for (r in 2:nrow(df_england)) {
if (df_england[r-1, 'seqId'] < df_england[r, 'seqId']){
df_englandReduced <- rbind(df_englandReduced, df_england[(r-4):(r-1),])
}
}
for (r in 1:nrow(df_englandReduced)){
if (df_englandReduced[r, 'isShot']=='True'){
df_englandReduced[r, 'type'] = 'Shot'
}
}
df_englandReduced <- distinct(subset(df_englandReduced,
subset = !(type %in% unused_actions)))
casted_data_england <- df_englandReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_england %>%
process_map(frequency("relative-antecedent"))
df_spainReduced <- data.frame()
for (r in 2:nrow(df_spain)) {
if (df_spain[r-1, 'seqId'] < df_spain[r, 'seqId']){
df_spainReduced <- rbind(df_spainReduced, df_spain[(r-4):(r-1),])
}
}
for (r in 1:nrow(df_spainReduced)){
if (df_spainReduced[r, 'isShot']=='True'){
df_spainReduced[r, 'type'] = 'Shot'
}
}
unused_actions = list("Aerial", "OffsideGiven",
"OffsidePass", 'Challenge',
"CornerAwarded", "BallTouch",
"FormationChange", "SubstitutionOn",
"SubstitutionOff")
df_spainReduced <- distinct(subset(df_spainReduced,
subset = !(type %in% unused_actions)))
casted_data_spain <- df_spainReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_spain %>%
process_map(frequency("relative-antecedent"))
library(bupaverse)
library("dplyr")
source("minsecToDate.R")
data <- read.csv("EurosFinal2024-Spain v England.csv")
df <- data.frame(data['eventId'], data['expandedMinute'], data['second'],
data['type'], data['outcomeType'], data['shortName'],
data['teamName'], data['isShot'])
for (r in 1:nrow(df)){
df[r, 'timeStamp'] = toDateFormat(df[r, 'expandedMinute'], df[r, 'second'])
if (r < nrow(df)){
df[r, 'endTimeStamp'] = toDateFormat(df[r+1, 'expandedMinute'], df[r+1, 'second'])
}
}
df_spain <- df[df$teamName=='Spain',]
df_england <- df[df$teamName=='England',]
seq <- 0
for (r in 1:nrow(df_spain)){
df_spain[r, 'seqId'] <- seq
if (df_spain[r, 'isShot']=='True'){
seq <- seq + 1
}
}
df_spainReduced <- data.frame()
for (r in 2:nrow(df_spain)) {
if (df_spain[r-1, 'seqId'] < df_spain[r, 'seqId']){
df_spainReduced <- rbind(df_spainReduced, df_spain[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_spainReduced)){
if (df_spainReduced[r, 'isShot']=='True'){
df_spainReduced[r, 'type'] = 'Shot'
}
}
unused_actions = list("Aerial", "OffsideGiven",
"OffsidePass", 'Challenge',
"CornerAwarded", "BallTouch",
"FormationChange", "SubstitutionOn",
"SubstitutionOff")
df_spainReduced <- distinct(subset(df_spainReduced,
subset = !(type %in% unused_actions)))
casted_data_spain <- df_spainReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_spain %>%
process_map(frequency("relative-antecedent"))
casted_data_spain %>%
process_matrix(frequency("relative-antecedent"))
plot(process_matrix(frequency("relative-antecedent")))
casted_data_spain %>%
process_matrix(frequency("relative-antecedent")) %>%
plot()
seq <- 0
for (r in 1:nrow(df_england)){
df_england[r, 'seqId'] <- seq
if (df_england[r, 'isShot']=='True'){
seq <- seq + 1
}
}
df_englandReduced <- data.frame()
for (r in 2:nrow(df_england)) {
if (df_england[r-1, 'seqId'] < df_england[r, 'seqId']){
df_englandReduced <- rbind(df_englandReduced, df_england[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_englandReduced)){
if (df_englandReduced[r, 'isShot']=='True'){
df_englandReduced[r, 'type'] = 'Shot'
}
}
df_englandReduced <- distinct(subset(df_englandReduced,
subset = !(type %in% unused_actions)))
casted_data_england <- df_englandReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_england %>%
process_map(frequency("relative-antecedent"))
casted_data_england %>%
process_matrix(frequency("relative-antecedent")) %>%
plot()
library(bupaverse)
library("dplyr")
source("minsecToDate.R")
data <- read.csv("EurosFinal2024-Spain v England.csv")
df <- data.frame(data['eventId'], data['expandedMinute'], data['second'],
data['type'], data['outcomeType'], data['shortName'],
data['teamName'], data['isShot'])
for (r in 1:nrow(df)){
df[r, 'timeStamp'] = toDateFormat(df[r, 'expandedMinute'], df[r, 'second'])
if (r < nrow(df)){
df[r, 'endTimeStamp'] = toDateFormat(df[r+1, 'expandedMinute'], df[r+1, 'second'])
}
}
df_spain <- df[df$teamName=='Spain',]
df_england <- df[df$teamName=='England',]
seq <- 0
for (r in 1:nrow(df_spain)){
df_spain[r, 'seqId'] <- seq
if (df_spain[r, 'isShot']=='True'){
seq <- seq + 1
}
}
df_spainReduced <- data.frame()
for (r in 2:nrow(df_spain)) {
if (df_spain[r-1, 'seqId'] < df_spain[r, 'seqId']){
df_spainReduced <- rbind(df_spainReduced, df_spain[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_spainReduced)){
if (df_spainReduced[r, 'isShot']=='True'){
df_spainReduced[r, 'type'] = 'Shot'
}
}
unused_actions = list("Aerial", "OffsideGiven",
"OffsidePass", 'Challenge',
"CornerAwarded", "BallTouch",
"FormationChange", "SubstitutionOn",
"SubstitutionOff")
df_spainReduced <- distinct(subset(df_spainReduced,
subset = !(type %in% unused_actions)))
casted_data_spain <- df_spainReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_spain %>%
process_matrix(frequency("relative-antecedent")) %>%
plot()
seq <- 0
for (r in 1:nrow(df_england)){
df_england[r, 'seqId'] <- seq
if (df_england[r, 'isShot']=='True'){
seq <- seq + 1
}
}
df_englandReduced <- data.frame()
for (r in 2:nrow(df_england)) {
if (df_england[r-1, 'seqId'] < df_england[r, 'seqId']){
df_englandReduced <- rbind(df_englandReduced, df_england[(r-3):(r-1),])
}
}
for (r in 1:nrow(df_englandReduced)){
if (df_englandReduced[r, 'isShot']=='True'){
df_englandReduced[r, 'type'] = 'Shot'
}
}
df_englandReduced <- distinct(subset(df_englandReduced,
subset = !(type %in% unused_actions)))
casted_data_england <- df_englandReduced %>%
# rename timestamp variables appropriately
dplyr::rename(start = timeStamp,
complete = endTimeStamp) %>%
# convert timestamps to
activitylog(case_id = "seqId",
activity_id = "type",
resource_id = "seqId",
timestamps = c("start", "complete"))
casted_data_england %>%
process_matrix(frequency("relative-antecedent")) %>%
plot()
